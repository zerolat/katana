#!/usr/sbin/nft -f
# vim: set tabstop=4 shiftwidth=4 expandtab:

flush ruleset

table netdev filter {
    set HOST_ADDRS {
        type ipv4_addr;
        elements = { {{ ansible_default_ipv4.address }} }
    }

    set GATEWAYS {
        type ipv4_addr;
        elements = { {{ ansible_default_ipv4.gateway }} }
    }

    chain ingress {
        type filter hook ingress device {{ ansible_default_ipv4.interface }} priority filter; policy accept;
        arp daddr ip != @HOST_ADDRS drop
        arp saddr ip != @GATEWAYS drop
    }
}

table inet filter {
    set TRUSTED_IPS {
        type ipv4_addr
        flags interval
{% if firewall_config.trusted_range is defined and firewall_config.trusted_range | length > 0 %}
        elements = { {{ firewall_config.trusted_range | join(', ') }} }
{% endif %}
    }

    set TCP_PORTS {
        type inet_service
        elements = { {{ sshd_config.Port | default('22') }}{% if firewall_config.tcp_port_access is defined and firewall_config.tcp_port_access | length > 0 %}, {{ firewall_config.tcp_port_access | join(', ') }}{% endif %} }
    }

    set UDP_PORTS {
        type inet_service
{% if firewall_config.udp_port_access is defined and firewall_config.udp_port_access | length > 0 %}
        elements = { {{ firewall_config.udp_port_access | join(', ') }} }
{% endif %}
    }

    set NETWORK_ADAPTERS {
        type ifname
{% if firewall_config.network_adapter_access is defined and firewall_config.network_adapter_access | length > 0 %}
        elements = { {{ firewall_config.network_adapter_access | join(', ') }} }
{% endif %}
    }

    chain input_ipv4 {
        ip saddr @TRUSTED_IPS accept
        icmp type echo-request limit rate 5/second accept
    }

    chain input_ipv6 {
        icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept
        icmpv6 type echo-request limit rate 5/second accept
    }

    chain input {
        type filter hook input priority filter; policy drop;

        ct state vmap { established : accept, related : accept, invalid : drop }
        
        iifname @NETWORK_ADAPTERS accept

        meta protocol vmap { ip : jump input_ipv4, ip6 : jump input_ipv6 }

        tcp dport @TCP_PORTS accept
        udp dport @UDP_PORTS accept
    }

    chain forward {
        type filter hook forward priority filter; policy drop;
    }
}
